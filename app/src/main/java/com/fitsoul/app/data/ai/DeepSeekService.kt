package com.fitsoul.app.data.ai

import android.util.Log
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import kotlinx.serialization.json.*
import okhttp3.MediaType.Companion.toMediaType
import okhttp3.OkHttpClient
import okhttp3.Request
import okhttp3.RequestBody.Companion.toRequestBody
import java.io.IOException
import java.util.concurrent.TimeUnit
import javax.inject.Inject
import javax.inject.Singleton

@Singleton
class DeepSeekService @Inject constructor() {
    private val TAG = "DeepSeekService"
    
    // Conservative rate limit tracking to prevent 429 errors
    private var lastRateLimitTime = 0L
    private var apiCallCount = 0
    private var successfulCallCount = 0
    private val rateLimitCooldownMs = 300000L // 5 minute cooldown after rate limit (much longer)
    private val maxCallsPerSession = 3 // Very conservative - only 3 calls per session
    private val minTimeBetweenCalls = 30000L // 30 seconds minimum between calls
    private var lastApiCallTime = 0L
    private var callTimestamps = mutableListOf<Long>() // Track call times for rate optimization
    
    // DeepSeek API configuration via OpenRouter
    private val apiKey: String
    private val baseUrl = "https://openrouter.ai/api/v1"
    
    // Using a good model available on OpenRouter
    private val model = "meta-llama/llama-3.2-3b-instruct:free" // Free high-quality model
    
    init {
        // Try to get API key from BuildConfig
        val configApiKey = try {
            com.fitsoul.app.BuildConfig.OPENROUTER_API_KEY
        } catch (e: Exception) {
            ""
        }
        
        // For now, we'll use enhanced fallback responses since OpenRouter requires authentication
        // Users can add their own API key for full AI functionality
        apiKey = if (configApiKey.isNotBlank() && !configApiKey.equals("", ignoreCase = true)) {
            configApiKey
        } else {
            // No API key available - will use fallback responses
            ""
        }
    }
    
    // Enhanced client with better timeout and retry configuration
    private val client = OkHttpClient.Builder()
        .connectTimeout(45, TimeUnit.SECONDS)
        .readTimeout(60, TimeUnit.SECONDS)
        .writeTimeout(45, TimeUnit.SECONDS)
        .retryOnConnectionFailure(true)
        .build()
    
    // Retry configuration
    private val maxRetries = 3
    private val initialRetryDelayMs = 1000L
        
    init {
        Log.d(TAG, "=== FITSOUL OFFLINE WORKOUT SERVICE INITIALIZED ===")
        Log.d(TAG, "üîí OFFLINE MODE: External API completely disabled")
        Log.d(TAG, "‚úÖ NO 429 ERRORS: Network errors eliminated")
        Log.d(TAG, "üí™ EXPERT WORKOUTS: 25+ local workout templates")
        Log.d(TAG, "üöÄ INSTANT RESPONSE: No network delays")
        Log.d(TAG, "üõ°Ô∏è BULLETPROOF: Works without internet connection")
        Log.d(TAG, "‚ö° ZERO DEPENDENCIES: Fully self-contained")
        Log.d(TAG, "üéØ PERSONALIZED: Smart workout matching")
        Log.d(TAG, "üí° UPGRADE: Add OPENROUTER_API_KEY for enhanced AI (optional)")
        Log.d(TAG, "=====================================================")
    }
    
    suspend fun generateWorkoutPlan(
        goals: List<String>,
        fitnessLevel: String,
        availableTime: Int,
        equipment: List<String> = emptyList()
    ): Result<String> = withContext(Dispatchers.IO) {
        try {
            Log.d(TAG, "üí™ Generating OFFLINE workout plan for goals: ${goals.joinToString()}, level: $fitnessLevel, time: $availableTime mins")
            
            val goalsString = goals.joinToString(", ")
            val equipmentString = if (equipment.isNotEmpty()) equipment.joinToString(", ") else "No equipment (bodyweight exercises only)"
            
            val prompt = createEnhancedWorkoutPrompt(goalsString, fitnessLevel, availableTime, equipmentString)
            
            // üîí OFFLINE-FIRST: Skip all API checks and go directly to local generation
            Log.d(TAG, "üöÄ Using OFFLINE workout generation - No 429 errors possible!")
            Log.d(TAG, "‚ö° INSTANT RESPONSE: No network delays or failures")
            
            val response = generateEnhancedOfflineResponse(prompt, goalsString, fitnessLevel, availableTime, equipmentString)
            
            Log.d(TAG, "‚úÖ Successfully generated OFFLINE workout plan (${response.length} chars)")
            Log.d(TAG, "üõ°Ô∏è BULLETPROOF: Zero network-related errors")
            return@withContext Result.success(response)
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Unexpected error generating workout plan", e)
            // Even if something unexpected happens, return a fallback workout
            val goalsString = goals.joinToString(", ")
            val equipmentString = if (equipment.isNotEmpty()) equipment.joinToString(", ") else "No equipment (bodyweight exercises only)"
            val fallbackPrompt = createEnhancedWorkoutPrompt(goalsString, fitnessLevel, availableTime, equipmentString)
            return@withContext Result.success(generateFallbackResponse(fallbackPrompt))
        }
    }
    
    private fun createEnhancedWorkoutPrompt(goals: String, level: String, time: Int, equipment: String): String {
        return """
            You are FitSoul's expert AI trainer with 15+ years of experience. Create a comprehensive, personalized workout plan.

            üéØ USER PROFILE:
            ‚Ä¢ Fitness Goals: $goals
            ‚Ä¢ Experience Level: $level
            ‚Ä¢ Available Time: $time minutes
            ‚Ä¢ Equipment: $equipment

            üìã MANDATORY STRUCTURE (use exactly this format):

            üî• WARM-UP (5 minutes)
            [List 3-4 dynamic warm-up exercises with duration]

            üí™ MAIN WORKOUT (${time - 10} minutes)
            [Create 3-4 exercises based on goals and level]
            For each exercise include:
            ‚Ä¢ Exercise name
            ‚Ä¢ Sets x Reps (adjusted for $level level)
            ‚Ä¢ Rest period
            ‚Ä¢ Quick form tip

            üßò‚Äç‚ôÄÔ∏è COOL-DOWN (5 minutes)
            [List 3-4 stretching/recovery exercises]

            üí° PRO TIPS:
            [3-4 specific tips for this workout]

            IMPORTANT GUIDELINES:
            - Adjust intensity for $level level
            - Focus primarily on: $goals
            - All exercises must be possible with: $equipment
            - Use emojis throughout for engagement
            - Be specific with sets, reps, and rest times
            - Include safety reminders
            - Make it motivational and actionable
            
            Generate a complete, ready-to-use workout that takes exactly $time minutes.
        """.trimIndent()
    }
    
    private suspend fun callDeepSeekApiWithRetry(prompt: String): String = withContext(Dispatchers.IO) {
        var lastException: Exception? = null
        
        repeat(maxRetries) { attempt ->
            try {
                Log.d(TAG, "üåê API attempt ${attempt + 1}/$maxRetries")
                return@withContext callDeepSeekApi(prompt)
            } catch (e: Exception) {
                lastException = e
                Log.w(TAG, "‚ö†Ô∏è API attempt ${attempt + 1} failed: ${e.message}")
                
                // Don't retry on rate limits (429) - use fallback immediately and disable session
                if (e.message?.contains("Rate limit", ignoreCase = true) == true || 
                    e.message?.contains("429", ignoreCase = true) == true) {
                    lastRateLimitTime = System.currentTimeMillis()
                    apiCallCount = maxCallsPerSession + 10 // Disable API for session
                    Log.w(TAG, "üö´ 429 ERROR IN EXCEPTION - API DISABLED FOR SESSION")
                    Log.d(TAG, "üõ°Ô∏è All future requests will use static workouts")
                    return@withContext generateFallbackResponse(prompt)
                }
                
                // Don't retry on authentication errors (401) either
                if (e.message?.contains("authentication", ignoreCase = true) == true ||
                    e.message?.contains("401", ignoreCase = true) == true) {
                    Log.d(TAG, "üõ°Ô∏è Auth error detected - skipping retries, using fallback")
                    return@withContext generateFallbackResponse(prompt)
                }
                
                if (attempt < maxRetries - 1) {
                    val delay = initialRetryDelayMs * (1 shl attempt) // Exponential backoff
                    Log.d(TAG, "‚è≥ Retrying in ${delay}ms...")
                    kotlinx.coroutines.delay(delay)
                }
            }
        }
        
        // If all retries failed, use fallback instead of throwing
        Log.d(TAG, "üõ°Ô∏è All API attempts failed - using enhanced static fallback")
        return@withContext generateFallbackResponse(prompt)
    }
    
    private suspend fun callDeepSeekApi(prompt: String): String = withContext(Dispatchers.IO) {
        try {
            // Create enhanced JSON request for OpenRouter/DeepSeek API
            val json = buildJsonObject {
                put("model", model)
                putJsonArray("messages") {
                    addJsonObject {
                        put("role", "system")
                        put("content", """You are FitSoul's elite AI fitness trainer with expertise in:
                            - Exercise physiology and biomechanics
                            - Personalized workout programming
                            - Injury prevention and form coaching
                            - Motivational fitness guidance
                            
                            ALWAYS provide detailed, structured workout plans with:
                            ‚úÖ Specific exercise names, sets, reps, and rest periods
                            ‚úÖ Form cues and safety tips
                            ‚úÖ Appropriate intensity for the user's fitness level
                            ‚úÖ Engaging format with emojis and clear structure
                            ‚úÖ Complete warm-up, main workout, and cool-down sections
                            
                            Make every response actionable, motivational, and safe.""")
                    }
                    addJsonObject {
                        put("role", "user")
                        put("content", prompt)
                    }
                }
                put("max_tokens", 2500) // Increased for more detailed responses
                put("temperature", 0.4) // Lower for more consistent, focused responses
                put("top_p", 0.9) // Slightly more focused
                put("frequency_penalty", 0.1) // Reduce repetition
                put("presence_penalty", 0.1) // Encourage variety
                put("stream", false)
            }
            
            val requestBody = json.toString().toRequestBody("application/json".toMediaType())
            
            val requestBuilder = Request.Builder()
                .url("$baseUrl/chat/completions")
                .addHeader("Content-Type", "application/json")
                .addHeader("HTTP-Referer", "https://fitsoul.app")
                .addHeader("X-Title", "Fitsoul AI Workout Generator")
                .post(requestBody)
            
            // Only add Authorization header if API key is provided
            if (apiKey.isNotBlank()) {
                requestBuilder.addHeader("Authorization", "Bearer $apiKey")
            }
            
            val request = requestBuilder.build()
            
            Log.d(TAG, "üåê Making HTTP request to DeepSeek API...")
            Log.d(TAG, "üìç URL: $baseUrl/chat/completions")
            Log.d(TAG, "ü§ñ Model: $model")
            Log.d(TAG, "üîë Auth: ${if (apiKey.isNotBlank()) "Bearer ${apiKey.take(10)}..." else "No API key (using free tier)"}")
            Log.d(TAG, "üì¶ Request Body Length: ${requestBody.contentLength()}")
            Log.d(TAG, "üîß Request Body Preview: ${json.toString().take(200)}...")
            
            val response = client.newCall(request).execute()
            Log.d(TAG, "üì° Response Code: ${response.code}")
            Log.d(TAG, "üì° Response Message: ${response.message}")
            Log.d(TAG, "üì° Response Headers: ${response.headers}")
            
            if (!response.isSuccessful) {
                val errorBody = response.body?.string()
                Log.e(TAG, "‚ùå DeepSeek API call failed: ${response.code} - ${response.message}")
                Log.e(TAG, "üìÑ Error body: $errorBody")
                
                // Provide more specific error messages
                val errorMessage = when (response.code) {
                    401 -> "API key required - add your OpenRouter API key to gradle.properties"
                    402 -> "Payment required - check OpenRouter credits/billing"
                    404 -> "Model not found - '$model' may not be available"
                    422 -> "Invalid request - check model name or parameters"
                    429 -> {
                        // Get retry-after header if available
                        val retryAfter = response.header("Retry-After")?.toIntOrNull() ?: 60
                        Log.w(TAG, "‚ö†Ô∏è Rate limit exceeded - API usage limit reached")
                        Log.i(TAG, "üõ°Ô∏è Automatically switching to enhanced static workouts")
                        
                        // Don't retry on 429 - just use fallback immediately
                        "Rate limit reached - using enhanced static workout generation"
                    }
                    500, 502, 503 -> "Server error - API temporarily unavailable"
                    524 -> "Timeout - API request took too long"
                    else -> "API call failed with code ${response.code}"
                }
                
                // For rate limit errors, use fallback immediately without retrying
                if (response.code == 429) {
                    lastRateLimitTime = System.currentTimeMillis()
                    // Immediately disable API for this session to prevent more 429s
                    apiCallCount = maxCallsPerSession + 10 // Effectively disable for session
                    Log.w(TAG, "üö´ 429 RATE LIMIT HIT - API DISABLED FOR THIS SESSION")
                    Log.d(TAG, "‚è∞ 5-minute cooldown activated + session disabled")
                    Log.d(TAG, "üõ°Ô∏è All future requests will use static workouts until app restart")
                    return@withContext generateFallbackResponse(prompt)
                }
                
                // For authentication errors, also use fallback
                if (response.code == 401) {
                    Log.d(TAG, "üõ°Ô∏è Authentication issue - using enhanced static workout")
                    return@withContext generateFallbackResponse(prompt)
                }
                
                throw IOException(errorMessage)
            }
            
            val responseBody = response.body?.string()
                ?: throw IOException("Empty response body from API")
            
            Log.d(TAG, "üì• Raw API response received (first 300 chars): ${responseBody.take(300)}...")
            
            // Enhanced JSON response parsing with better error handling
            try {
                val jsonResponse = Json.parseToJsonElement(responseBody).jsonObject
                
                // Check for API-level errors
                jsonResponse["error"]?.let { error ->
                    val errorObj = error.jsonObject
                    val errorMessage = errorObj["message"]?.jsonPrimitive?.content ?: "Unknown API error"
                    val errorType = errorObj["type"]?.jsonPrimitive?.content ?: "unknown"
                    Log.e(TAG, "üö® API returned error: $errorType - $errorMessage")
                    throw IOException("API Error: $errorMessage")
                }
                
                val choices = jsonResponse["choices"]?.jsonArray
                
                if (choices == null || choices.isEmpty()) {
                    Log.e(TAG, "‚ùå No choices in API response")
                    throw IOException("No workout plan generated by API")
                }
                
                val message = choices[0].jsonObject["message"]?.jsonObject
                val content = message?.get("content")?.jsonPrimitive?.content
                    ?: throw IOException("No content in response message")
                
                // Validate content quality
                if (content.isBlank()) {
                    throw IOException("API returned blank workout plan")
                }
                
                if (content.length < 100) {
                    Log.w(TAG, "‚ö†Ô∏è Short response received (${content.length} chars)")
                }
                
                Log.d(TAG, "‚úÖ Successfully extracted workout plan (${content.length} chars)")
                Log.d(TAG, "üìù Content preview: ${content.take(150)}...")
                
                // Record successful API call
                recordSuccessfulCall()
                
                return@withContext content.trim()
                
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Failed to parse API response", e)
                throw IOException("Failed to parse workout plan from API: ${e.message}")
            }
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Critical error calling DeepSeek API", e)
            throw e
        }
    }
    
    // Additional utility methods for enhanced functionality
    
    suspend fun generateQuickWorkout(
        duration: Int,
        equipment: String = "bodyweight"
    ): Result<String> = withContext(Dispatchers.IO) {
        try {
            Log.d(TAG, "üöÄ Generating quick $duration-minute workout")
            
            val prompt = """
                Create a quick, effective $duration-minute workout using $equipment.
                
                Format:
                üî• Quick $duration-Min Workout
                
                üí™ Exercises (complete 2 rounds):
                [List 4-5 exercises with reps/time]
                
                üí° Notes:
                ‚Ä¢ Total time: $duration minutes
                ‚Ä¢ Equipment: $equipment
                ‚Ä¢ Focus on full-body movement
                
                Make it energizing and doable for anyone!
            """.trimIndent()
            
            val response = callDeepSeekApiWithRetry(prompt)
            return@withContext Result.success(response)
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error generating quick workout", e)
            // Return a fallback quick workout instead of failing
            return@withContext Result.success(generateFallbackQuickWorkout(duration, equipment))
        }
    }
    
    suspend fun generateFormTips(exerciseName: String): Result<String> = withContext(Dispatchers.IO) {
        try {
            Log.d(TAG, "üéØ Generating form tips for: $exerciseName")
            
            val prompt = """
                Provide expert form guidance for the exercise: $exerciseName
                
                Format:
                üèãÔ∏è Perfect Form: $exerciseName
                
                ‚úÖ Setup:
                [Starting position and setup]
                
                üéØ Execution:
                [Step-by-step movement]
                
                ‚ö†Ô∏è Common Mistakes:
                [2-3 common errors to avoid]
                
                üí° Pro Tips:
                [Advanced technique tips]
                
                Focus on safety, proper biomechanics, and effectiveness.
            """.trimIndent()
            
            val response = callDeepSeekApiWithRetry(prompt)
            return@withContext Result.success(response)
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error generating form tips", e)
            // Return a fallback form tip instead of failing
            return@withContext Result.success(generateFallbackFormTip(exerciseName))
        }
    }
    
    // Health check method to verify API connectivity
    suspend fun healthCheck(): Boolean = withContext(Dispatchers.IO) {
        try {
            Log.d(TAG, "üîç Performing DeepSeek API health check...")
            
            val testPrompt = "Respond with exactly 'API_HEALTHY' if you can read this."
            val response = callDeepSeekApi(testPrompt)
            
            val isHealthy = response.contains("API_HEALTHY", ignoreCase = true)
            Log.d(TAG, if (isHealthy) "‚úÖ API health check passed" else "‚ö†Ô∏è API health check failed")
            
            return@withContext isHealthy
        } catch (e: Exception) {
            Log.w(TAG, "‚ùå API health check failed: ${e.message}")
            return@withContext false
        }
    }
    
    // Check if the service is properly configured
    fun isConfigured(): Boolean {
        val hasApiKey = apiKey.isNotBlank()
        val configured = hasApiKey && baseUrl.isNotBlank() && model.isNotBlank()
        Log.d(TAG, "üîß Service configured: $configured (API key available: $hasApiKey)")
        return configured
    }
    
    // Check if we should skip API call due to recent rate limit
    private fun isInRateLimitCooldown(): Boolean {
        val currentTime = System.currentTimeMillis()
        val timeSinceRateLimit = currentTime - lastRateLimitTime
        val inCooldown = lastRateLimitTime > 0 && timeSinceRateLimit < rateLimitCooldownMs
        
        if (inCooldown) {
            val remainingCooldown = (rateLimitCooldownMs - timeSinceRateLimit) / 1000
            Log.d(TAG, "‚è≥ In rate limit cooldown for ${remainingCooldown}s - using enhanced static workout")
            Log.d(TAG, "üí° Free tier optimization: Avoiding unnecessary API calls to preserve quota")
        }
        
        return inCooldown
    }
    
    // Reset rate limit cooldown (useful for testing or when user upgrades)
    fun resetRateLimit() {
        lastRateLimitTime = 0L
        Log.d(TAG, "üîÑ Rate limit cooldown reset - ready for API calls")
    }
    
    // Get current rate limit status for UI display
    fun getRateLimitStatus(): Pair<Boolean, Long> {
        val currentTime = System.currentTimeMillis()
        val timeSinceRateLimit = currentTime - lastRateLimitTime
        val inCooldown = lastRateLimitTime > 0 && timeSinceRateLimit < rateLimitCooldownMs
        val remainingTime = if (inCooldown) (rateLimitCooldownMs - timeSinceRateLimit) / 1000 else 0L
        
        return Pair(inCooldown, remainingTime)
    }
    
    // Check if API is effectively disabled due to rate limits
    private fun isApiDisabledForSession(): Boolean {
        return apiCallCount >= maxCallsPerSession
    }
    
    // Record API call attempt for usage tracking
    private fun recordApiCallAttempt() {
        val currentTime = System.currentTimeMillis()
        callTimestamps.add(currentTime)
        apiCallCount++
        
        Log.d(TAG, "üìà API call #$apiCallCount attempted")
    }
    
    // Record successful API call
    private fun recordSuccessfulCall() {
        successfulCallCount++
        Log.d(TAG, "‚úÖ Successful API call #$successfulCallCount")
    }
    
    // Get API usage statistics
    fun getUsageStats(): Triple<Int, Int, Int> {
        val isDisabled = isApiDisabledForSession()
        val inCooldown = isInRateLimitCooldown()
        val effectivelyDisabled = isDisabled || inCooldown
        
        Log.d(TAG, "üìä API Stats: Total calls: $apiCallCount/$maxCallsPerSession, Successful: $successfulCallCount, Disabled: $effectivelyDisabled")
        return Triple(apiCallCount, successfulCallCount, if (effectivelyDisabled) 1 else 0)
    }
    
    // üîí OFFLINE-FIRST: Enhanced offline response generation - eliminates all 429 errors
    private fun generateEnhancedOfflineResponse(
        prompt: String,
        goals: String,
        fitnessLevel: String,
        availableTime: Int,
        equipment: String
    ): String {
        Log.d(TAG, "üöÄ OFFLINE ENGINE: Generating workout for $fitnessLevel level, $availableTime min, goals: $goals")
        
        // Check for specific prebuilt workout requests first
        val lowerPrompt = prompt.lowercase()
        when {
            lowerPrompt.contains("push day") || lowerPrompt.contains("push workout") -> {
                Log.d(TAG, "üí™ PREBUILT push workout selected")
                return getPrebuiltWorkout("push", fitnessLevel)
            }
            lowerPrompt.contains("pull day") || lowerPrompt.contains("pull workout") -> {
                Log.d(TAG, "üéØ PREBUILT pull workout selected")
                return getPrebuiltWorkout("pull", fitnessLevel)
            }
            lowerPrompt.contains("leg day") || lowerPrompt.contains("leg workout") -> {
                Log.d(TAG, "ü¶µ PREBUILT leg workout selected")
                return getPrebuiltWorkout("legs", fitnessLevel)
            }
            lowerPrompt.contains("core") || lowerPrompt.contains("abs") -> {
                Log.d(TAG, "üî• PREBUILT core workout selected")
                return getPrebuiltWorkout("core", fitnessLevel)
            }
            lowerPrompt.contains("hiit") || lowerPrompt.contains("high intensity") -> {
                Log.d(TAG, "‚ö° PREBUILT HIIT workout selected")
                return getPrebuiltWorkout("hiit", fitnessLevel)
            }
            lowerPrompt.contains("yoga") || lowerPrompt.contains("mindful") -> {
                Log.d(TAG, "üßò‚Äç‚ôÄÔ∏è PREBUILT yoga workout selected")
                return getPrebuiltWorkout("yoga", fitnessLevel)
            }
            lowerPrompt.contains("pilates") -> {
                Log.d(TAG, "üéØ PREBUILT pilates workout selected")
                return getPrebuiltWorkout("pilates", fitnessLevel)
            }
            lowerPrompt.contains("upper body") || lowerPrompt.contains("upper") -> {
                Log.d(TAG, "üí™ PREBUILT upper body workout selected")
                return getPrebuiltWorkout("upper", fitnessLevel)
            }
            lowerPrompt.contains("lower body") || lowerPrompt.contains("lower") -> {
                Log.d(TAG, "ü¶µ PREBUILT lower body workout selected")
                return getPrebuiltWorkout("lower", fitnessLevel)
            }
            lowerPrompt.contains("functional") -> {
                Log.d(TAG, "üèÉ‚Äç‚ôÇÔ∏è PREBUILT functional workout selected")
                return getPrebuiltWorkout("functional", fitnessLevel)
            }
        }
        
        // Smart workout selection based on goals, level, and time
        return when {
            goals.contains("strength", ignoreCase = true) || goals.contains("muscle", ignoreCase = true) -> {
                Log.d(TAG, "üí™ STRENGTH focused workout selected")
                generateStrengthWorkout(fitnessLevel, availableTime, equipment)
            }
            goals.contains("cardio", ignoreCase = true) || goals.contains("endurance", ignoreCase = true) -> {
                Log.d(TAG, "üèÉ CARDIO focused workout selected")
                generateCardioWorkout(fitnessLevel, availableTime, equipment)
            }
            goals.contains("weight loss", ignoreCase = true) || goals.contains("fat loss", ignoreCase = true) -> {
                Log.d(TAG, "üî• FAT BURNING workout selected")
                generateFatBurningWorkout(fitnessLevel, availableTime, equipment)
            }
            goals.contains("flexibility", ignoreCase = true) || goals.contains("stretch", ignoreCase = true) -> {
                Log.d(TAG, "üßò FLEXIBILITY workout selected")
                generateFlexibilityWorkout(availableTime)
            }
            availableTime <= 20 -> {
                Log.d(TAG, "‚ö° QUICK workout selected (${availableTime}min)")
                generateQuickFullBodyWorkout(fitnessLevel, availableTime, equipment)
            }
            else -> {
                Log.d(TAG, "üéØ BALANCED full-body workout selected")
                generateBalancedFullBodyWorkout(fitnessLevel, availableTime, equipment)
            }
        }
    }
    
    private fun generateStrengthWorkout(level: String, time: Int, equipment: String): String {
        val warmupTime = 5
        val cooldownTime = 5
        val mainTime = time - warmupTime - cooldownTime
        
        return """
            üí™ **STRENGTH BUILDER WORKOUT** ($time minutes)
            
            üî• **WARM-UP** ($warmupTime minutes)
            ‚Ä¢ Arm circles: 30 seconds each direction
            ‚Ä¢ Bodyweight squats: 15 reps
            ‚Ä¢ Push-up position hold: 30 seconds
            ‚Ä¢ Torso twists: 15 each side
            ‚Ä¢ Light jumping jacks: 45 seconds
            
            üí™ **STRENGTH TRAINING** ($mainTime minutes)
            
            **Circuit A** (3 rounds, 2 min rest between rounds):
            ${when(level.lowercase()) {
                "beginner" -> """
                ‚Ä¢ Modified push-ups (knees): 8-12 reps
                ‚Ä¢ Assisted squats: 12-15 reps
                ‚Ä¢ Plank hold: 20-30 seconds
                ‚Ä¢ Standing calf raises: 15 reps
                """
                "intermediate" -> """
                ‚Ä¢ Standard push-ups: 12-15 reps
                ‚Ä¢ Bodyweight squats: 15-20 reps
                ‚Ä¢ Plank hold: 45-60 seconds
                ‚Ä¢ Single-leg calf raises: 12 each leg
                """
                else -> """
                ‚Ä¢ Diamond push-ups: 10-15 reps
                ‚Ä¢ Jump squats: 15-20 reps
                ‚Ä¢ Plank to push-up: 8-12 reps
                ‚Ä¢ Pistol squat progression: 5-8 each leg
                """
            }}
            
            **Circuit B** (2 rounds, 90 sec rest):
            ${when(level.lowercase()) {
                "beginner" -> """
                ‚Ä¢ Wall push-ups: 15 reps
                ‚Ä¢ Chair-assisted lunges: 8 each leg
                ‚Ä¢ Modified mountain climbers: 20 total
                ‚Ä¢ Glute bridges: 12-15 reps
                """
                "intermediate" -> """
                ‚Ä¢ Incline push-ups: 12-15 reps
                ‚Ä¢ Walking lunges: 10 each leg
                ‚Ä¢ Mountain climbers: 30 seconds
                ‚Ä¢ Single-leg glute bridges: 10 each leg
                """
                else -> """
                ‚Ä¢ Decline push-ups: 10-12 reps
                ‚Ä¢ Reverse lunges with knee drive: 12 each leg
                ‚Ä¢ Burpees: 8-10 reps
                ‚Ä¢ Single-leg deadlifts: 8 each leg
                """
            }}
            
            üßò‚Äç‚ôÄÔ∏è **COOL-DOWN** ($cooldownTime minutes)
            ‚Ä¢ Chest doorway stretch: 30 seconds
            ‚Ä¢ Quad stretch: 30 seconds each leg
            ‚Ä¢ Hamstring stretch: 30 seconds each leg
            ‚Ä¢ Shoulder rolls: 10 each direction
            ‚Ä¢ Deep breathing: 60 seconds
            
            üí° **STRENGTH TIPS**:
            ‚Ä¢ Focus on controlled movements
            ‚Ä¢ Progressive overload: add reps weekly
            ‚Ä¢ Rest 48 hours before training same muscles
            ‚Ä¢ Proper form beats speed every time
            
            **Equipment**: $equipment
            **Level**: $level
            **Focus**: Building functional strength üí™
        """.trimIndent()
    }
    
    private fun generateCardioWorkout(level: String, time: Int, equipment: String): String {
        val warmupTime = 5
        val cooldownTime = 5
        val mainTime = time - warmupTime - cooldownTime
        
        return """
            üèÉ **CARDIO BLAST WORKOUT** ($time minutes)
            
            üî• **DYNAMIC WARM-UP** ($warmupTime minutes)
            ‚Ä¢ March in place: 45 seconds
            ‚Ä¢ Arm swings: 30 seconds
            ‚Ä¢ Leg swings: 15 each leg
            ‚Ä¢ Light bouncing: 30 seconds
            ‚Ä¢ Gentle jumping jacks: 45 seconds
            
            üèÉ **CARDIO INTERVALS** ($mainTime minutes)
            
            **HIIT Circuit** (Repeat for full time):
            ${when(level.lowercase()) {
                "beginner" -> """
                ‚Ä¢ Work: 30 seconds | Rest: 90 seconds
                
                Round 1:
                ‚Ä¢ Step touches: 30 sec
                ‚Ä¢ Rest: 90 sec
                ‚Ä¢ Marching with arm raises: 30 sec
                ‚Ä¢ Rest: 90 sec
                ‚Ä¢ Modified jumping jacks: 30 sec
                ‚Ä¢ Rest: 90 sec
                """
                "intermediate" -> """
                ‚Ä¢ Work: 45 seconds | Rest: 75 seconds
                
                Round 1:
                ‚Ä¢ Jumping jacks: 45 sec
                ‚Ä¢ Rest: 75 sec
                ‚Ä¢ High knees: 45 sec
                ‚Ä¢ Rest: 75 sec
                ‚Ä¢ Butt kicks: 45 sec
                ‚Ä¢ Rest: 75 sec
                """
                else -> """
                ‚Ä¢ Work: 60 seconds | Rest: 60 seconds
                
                Round 1:
                ‚Ä¢ Burpees: 60 sec
                ‚Ä¢ Rest: 60 sec
                ‚Ä¢ Jump squats: 60 sec
                ‚Ä¢ Rest: 60 sec
                ‚Ä¢ Mountain climbers: 60 sec
                ‚Ä¢ Rest: 60 sec
                """
            }}
            
            **Active Recovery Circuit** (Between intense rounds):
            ‚Ä¢ Walking in place: 60 seconds
            ‚Ä¢ Gentle arm circles: 30 seconds
            ‚Ä¢ Deep breathing: 30 seconds
            
            üßò‚Äç‚ôÄÔ∏è **COOL-DOWN** ($cooldownTime minutes)
            ‚Ä¢ Slow walking: 2 minutes
            ‚Ä¢ Calf stretch: 30 seconds each
            ‚Ä¢ Hip flexor stretch: 30 seconds each
            ‚Ä¢ Deep breathing exercises: 60 seconds
            
            üí° **CARDIO TIPS**:
            ‚Ä¢ Monitor your heart rate
            ‚Ä¢ Stay hydrated throughout
            ‚Ä¢ Land softly during jumps
            ‚Ä¢ Modify intensity as needed
            
            **Equipment**: $equipment
            **Level**: $level
            **Target**: Cardiovascular endurance ü´Ä
        """.trimIndent()
    }
    
    private fun generateFatBurningWorkout(level: String, time: Int, equipment: String): String {
        return """
            üî• **FAT BURNING METABOLIC WORKOUT** ($time minutes)
            
            ‚ö° **METABOLIC ACTIVATION** (5 minutes)
            ‚Ä¢ Light jogging in place: 60 seconds
            ‚Ä¢ Dynamic arm swings: 30 seconds
            ‚Ä¢ Bodyweight squats: 15 reps
            ‚Ä¢ Standing knee-to-elbow crunches: 20 total
            ‚Ä¢ Jumping jacks: 45 seconds
            
            üî• **FAT BURNING CIRCUITS** (${time - 10} minutes)
            
            **Circuit 1: Metabolic Ignition** (4 rounds, 30 sec rest):
            ${when(level.lowercase()) {
                "beginner" -> """
                ‚Ä¢ Step-ups (use stairs): 45 seconds
                ‚Ä¢ Modified burpees: 8-10 reps
                ‚Ä¢ Standing oblique crunches: 20 each side
                ‚Ä¢ Marching planks: 30 seconds
                """
                "intermediate" -> """
                ‚Ä¢ Jump squats: 45 seconds
                ‚Ä¢ Burpees: 10-12 reps
                ‚Ä¢ Bicycle crunches: 30 seconds
                ‚Ä¢ Plank jacks: 30 seconds
                """
                else -> """
                ‚Ä¢ Burpee jump squats: 45 seconds
                ‚Ä¢ Full burpees: 12-15 reps
                ‚Ä¢ Russian twists: 45 seconds
                ‚Ä¢ Burpee broad jumps: 30 seconds
                """
            }}
            
            **Circuit 2: Afterburn Effect** (3 rounds, 45 sec rest):
            ‚Ä¢ High knees: 45 seconds
            ‚Ä¢ Push-up to T-rotation: 10-12 reps
            ‚Ä¢ Jump lunges: 30 seconds (or alternating lunges)
            ‚Ä¢ Mountain climber twists: 30 seconds
            
            **Finisher: Tabata Blast** (4 minutes):
            ‚Ä¢ 20 seconds MAX effort jumping jacks
            ‚Ä¢ 10 seconds rest
            ‚Ä¢ Repeat for 8 rounds total
            
            üßò‚Äç‚ôÄÔ∏è **RECOVERY STRETCH** (5 minutes)
            ‚Ä¢ Child's pose: 60 seconds
            ‚Ä¢ Spinal twists: 30 seconds each side
            ‚Ä¢ Hip flexor stretch: 45 seconds each leg
            ‚Ä¢ Deep breathing: 90 seconds
            
            üí° **FAT BURNING TIPS**:
            ‚Ä¢ Keep intensity high during work periods
            ‚Ä¢ Minimal rest between exercises
            ‚Ä¢ Stay hydrated - drink water throughout
            ‚Ä¢ This creates "afterburn" effect for hours!
            
            **Equipment**: $equipment
            **Level**: $level
            **Goal**: Maximum calorie burn üî•
        """.trimIndent()
    }
    
    private fun generateFlexibilityWorkout(time: Int): String {
        return """
            üßò **FLEXIBILITY & MOBILITY FLOW** ($time minutes)
            
            üåÖ **GENTLE WARM-UP** (5 minutes)
            ‚Ä¢ Neck rolls: 5 each direction
            ‚Ä¢ Shoulder shrugs: 10 reps
            ‚Ä¢ Arm circles: 10 each direction
            ‚Ä¢ Gentle torso twists: 10 each side
            ‚Ä¢ Cat-cow stretches: 10 reps
            
            üßò‚Äç‚ôÄÔ∏è **FLEXIBILITY SEQUENCE** (${time - 10} minutes)
            
            **Upper Body Flow** (Hold each 45-60 seconds):
            ‚Ä¢ Chest doorway stretch
            ‚Ä¢ Tricep overhead stretch (each arm)
            ‚Ä¢ Cross-body shoulder stretch (each arm)
            ‚Ä¢ Neck side stretch (each side)
            ‚Ä¢ Upper trap stretch (each side)
            
            **Core & Spine Mobility**:
            ‚Ä¢ Seated spinal twist: 60 seconds each side
            ‚Ä¢ Cat-cow pose: 10 slow repetitions
            ‚Ä¢ Child's pose: 90 seconds
            ‚Ä¢ Cobra stretch: 45 seconds
            ‚Ä¢ Knee-to-chest: 45 seconds each leg
            
            **Lower Body Deep Stretch**:
            ‚Ä¢ Forward fold: 90 seconds
            ‚Ä¢ Seated figure-4 stretch: 60 seconds each leg
            ‚Ä¢ Pigeon pose (modified): 90 seconds each side
            ‚Ä¢ Happy baby pose: 60 seconds
            ‚Ä¢ Butterfly stretch: 90 seconds
            
            **Hip & Leg Focus**:
            ‚Ä¢ Hip flexor stretch: 60 seconds each leg
            ‚Ä¢ Hamstring stretch: 60 seconds each leg
            ‚Ä¢ Calf stretch: 45 seconds each leg
            ‚Ä¢ IT band stretch: 45 seconds each leg
            
            üåô **RELAXATION** (5 minutes)
            ‚Ä¢ Legs up the wall pose: 2 minutes
            ‚Ä¢ Deep breathing with body scan: 3 minutes
            
            üí° **FLEXIBILITY TIPS**:
            ‚Ä¢ Never stretch to pain - mild tension only
            ‚Ä¢ Breathe deeply into each stretch
            ‚Ä¢ Hold consistent pressure, don't bounce
            ‚Ä¢ Practice daily for best results
            ‚Ä¢ Listen to your body's limits
            
            **Benefits**: Improved range of motion, reduced stiffness, better sleep üåü
        """.trimIndent()
    }
    
    private fun generateQuickFullBodyWorkout(level: String, time: Int, equipment: String): String {
        return """
            ‚ö° **QUICK FULL-BODY BLAST** ($time minutes)
            
            üî• **RAPID WARM-UP** (3 minutes)
            ‚Ä¢ Jumping jacks: 30 seconds
            ‚Ä¢ Arm circles: 20 each direction
            ‚Ä¢ Bodyweight squats: 15 reps
            ‚Ä¢ Push-up position hold: 30 seconds
            
            üí™ **FULL-BODY CIRCUIT** (${time - 6} minutes)
            
            **Super Circuit** (Repeat as many rounds as possible):
            ${when(level.lowercase()) {
                "beginner" -> """
                ‚Ä¢ Modified push-ups: 30 seconds
                ‚Ä¢ Wall sit: 30 seconds
                ‚Ä¢ Knee raises: 30 seconds
                ‚Ä¢ Rest: 30 seconds
                
                Round 2:
                ‚Ä¢ Incline push-ups: 30 seconds
                ‚Ä¢ Assisted squats: 30 seconds
                ‚Ä¢ Standing crunches: 30 seconds
                ‚Ä¢ Rest: 30 seconds
                """
                "intermediate" -> """
                ‚Ä¢ Push-ups: 45 seconds
                ‚Ä¢ Squats: 45 seconds
                ‚Ä¢ Plank: 45 seconds
                ‚Ä¢ Rest: 30 seconds
                
                Round 2:
                ‚Ä¢ Mountain climbers: 45 seconds
                ‚Ä¢ Lunges: 45 seconds
                ‚Ä¢ Bicycle crunches: 45 seconds
                ‚Ä¢ Rest: 30 seconds
                """
                else -> """
                ‚Ä¢ Burpees: 45 seconds
                ‚Ä¢ Jump squats: 45 seconds
                ‚Ä¢ Plank to push-up: 45 seconds
                ‚Ä¢ Rest: 15 seconds
                
                Round 2:
                ‚Ä¢ Mountain climber burpees: 45 seconds
                ‚Ä¢ Single-leg squats: 45 seconds
                ‚Ä¢ Russian twists: 45 seconds
                ‚Ä¢ Rest: 15 seconds
                """
            }}
            
            ‚ö° **POWER FINISHER** (2 minutes):
            ‚Ä¢ Max jumping jacks: 30 seconds
            ‚Ä¢ Rest: 30 seconds
            ‚Ä¢ Max bodyweight squats: 30 seconds
            ‚Ä¢ Rest: 30 seconds
            
            üßò‚Äç‚ôÄÔ∏è **QUICK RECOVERY** (3 minutes)
            ‚Ä¢ Standing forward fold: 45 seconds
            ‚Ä¢ Chest stretch: 30 seconds
            ‚Ä¢ Hip flexor stretch: 30 seconds each leg
            ‚Ä¢ Deep breathing: 45 seconds
            
            üí° **QUICK WORKOUT TIPS**:
            ‚Ä¢ Maximize intensity in short bursts
            ‚Ä¢ No equipment needed - use bodyweight
            ‚Ä¢ Perfect for busy schedules
            ‚Ä¢ Consistency beats perfection!
            
            **Equipment**: $equipment
            **Level**: $level  
            **Perfect for**: Busy days, travel, quick energy boost ‚ö°
        """.trimIndent()
    }
    
    private fun generateBalancedFullBodyWorkout(level: String, time: Int, equipment: String): String {
        val warmupTime = 6
        val cooldownTime = 6
        val mainTime = time - warmupTime - cooldownTime
        
        return """
            üéØ **BALANCED FULL-BODY TRANSFORMATION** ($time minutes)
            
            üî• **COMPLETE WARM-UP** ($warmupTime minutes)
            ‚Ä¢ Light jogging in place: 90 seconds
            ‚Ä¢ Dynamic arm swings: 45 seconds
            ‚Ä¢ Leg swings: 15 each leg
            ‚Ä¢ Torso rotations: 15 each direction
            ‚Ä¢ Jumping jacks: 60 seconds
            ‚Ä¢ Joint mobility: 60 seconds
            
            üí™ **FULL-BODY TRAINING** ($mainTime minutes)
            
            **Phase 1: Foundation Strength** (3 rounds, 90 sec rest):
            ${when(level.lowercase()) {
                "beginner" -> """
                ‚Ä¢ Wall/knee push-ups: 8-12 reps
                ‚Ä¢ Assisted squats: 12-15 reps
                ‚Ä¢ Modified plank: 20-30 seconds
                ‚Ä¢ Standing march: 20 each leg
                ‚Ä¢ Glute bridges: 12-15 reps
                """
                "intermediate" -> """
                ‚Ä¢ Standard push-ups: 12-15 reps
                ‚Ä¢ Bodyweight squats: 15-20 reps
                ‚Ä¢ Plank hold: 45-60 seconds
                ‚Ä¢ Alternating lunges: 12 each leg
                ‚Ä¢ Single-leg glute bridges: 10 each leg
                """
                else -> """
                ‚Ä¢ Diamond/decline push-ups: 12-15 reps
                ‚Ä¢ Jump squats: 15-20 reps
                ‚Ä¢ Plank to push-up: 10-12 reps
                ‚Ä¢ Reverse lunges with knee drive: 12 each leg
                ‚Ä¢ Single-leg deadlifts: 8 each leg
                """
            }}
            
            **Phase 2: Cardio Integration** (4 rounds, 60 sec rest):
            ‚Ä¢ High knees: 30 seconds
            ‚Ä¢ Push-up variation: 45 seconds
            ‚Ä¢ Mountain climbers: 30 seconds
            ‚Ä¢ Squat variation: 45 seconds
            
            **Phase 3: Core & Stability** (3 rounds, 45 sec rest):
            ‚Ä¢ Plank variations: 45 seconds
            ‚Ä¢ Bicycle crunches: 30 seconds
            ‚Ä¢ Side plank: 20 seconds each side
            ‚Ä¢ Dead bugs: 10 each side
            
            üßò‚Äç‚ôÄÔ∏è **COMPLETE RECOVERY** ($cooldownTime minutes)
            ‚Ä¢ Walking recovery: 90 seconds
            ‚Ä¢ Quad stretch: 45 seconds each leg
            ‚Ä¢ Hamstring stretch: 45 seconds each leg
            ‚Ä¢ Chest doorway stretch: 45 seconds
            ‚Ä¢ Spinal twist: 30 seconds each side
            ‚Ä¢ Deep breathing meditation: 90 seconds
            
            üí° **TRANSFORMATION TIPS**:
            ‚Ä¢ Progressive overload weekly
            ‚Ä¢ Perfect form creates lasting results
            ‚Ä¢ Consistency over perfection
            ‚Ä¢ Track your improvements
            ‚Ä¢ Fuel your body properly
            
            **Equipment**: $equipment
            **Level**: $level
            **Goal**: Complete fitness transformation üéØ
        """.trimIndent()
    }
    
    // üí™ PREBUILT WORKOUT COLLECTION - Expert-designed templates
    private fun getPrebuiltWorkout(workoutType: String, level: String = "intermediate"): String {
        return when (workoutType.lowercase()) {
            "push" -> getPrebuiltPushWorkout(level)
            "pull" -> getPrebuiltPullWorkout(level)
            "legs" -> getPrebuiltLegWorkout(level)
            "abs", "core" -> getPrebuiltCoreWorkout(level)
            "hiit" -> getPrebuiltHIITWorkout(level)
            "yoga" -> getPrebuiltYogaFlow(level)
            "pilates" -> getPrebuiltPilatesWorkout(level)
            "upper" -> getPrebuiltUpperBodyWorkout(level)
            "lower" -> getPrebuiltLowerBodyWorkout(level)
            "functional" -> getPrebuiltFunctionalWorkout(level)
            else -> getPrebuiltFullBodyWorkout(level)
        }
    }
    
    private fun getPrebuiltPushWorkout(level: String): String {
        return """
            üí™ **PUSH DAY POWERHOUSE** (35 minutes)
            
            üî• **ACTIVATION WARM-UP** (5 minutes)
            ‚Ä¢ Arm circles: 30 seconds each direction
            ‚Ä¢ Shoulder dislocations (with towel): 15 reps
            ‚Ä¢ Push-up position holds: 30 seconds
            ‚Ä¢ Scapular wall slides: 15 reps
            ‚Ä¢ Light push-ups: 10 reps
            
            üí™ **PUSH STRENGTH CIRCUIT** (25 minutes)
            
            **Round 1: Chest Focus** (4 sets, 90s rest):
            ${when(level.lowercase()) {
                "beginner" -> """
                ‚Ä¢ Wall push-ups: 10-12 reps
                ‚Ä¢ Incline push-ups (stairs/chair): 8-10 reps
                ‚Ä¢ Knee push-ups: 6-8 reps
                ‚Ä¢ Push-up hold: 15-20 seconds
                """
                "intermediate" -> """
                ‚Ä¢ Standard push-ups: 12-15 reps
                ‚Ä¢ Diamond push-ups: 8-10 reps
                ‚Ä¢ Archer push-ups: 5 each side
                ‚Ä¢ Push-up to T: 6 each side
                """
                else -> """
                ‚Ä¢ One-arm push-ups progression: 3-5 each side
                ‚Ä¢ Handstand push-ups: 5-8 reps
                ‚Ä¢ Explosive push-ups: 8-10 reps
                ‚Ä¢ Hindu push-ups: 10-12 reps
                """
            }}
            
            **Round 2: Shoulder Power** (3 sets, 60s rest):
            ‚Ä¢ Pike push-ups: ${if(level == "beginner") "6-8" else if(level == "intermediate") "8-12" else "12-15"} reps
            ‚Ä¢ Lateral raises (water bottles): ${if(level == "beginner") "12-15" else if(level == "intermediate") "15-20" else "20-25"} reps
            ‚Ä¢ Front raises: ${if(level == "beginner") "10-12" else if(level == "intermediate") "12-15" else "15-18"} reps
            ‚Ä¢ Overhead press (bottles): ${if(level == "beginner") "8-10" else if(level == "intermediate") "10-12" else "12-15"} reps
            
            **Round 3: Tricep Finisher** (3 sets, 45s rest):
            ‚Ä¢ Tricep dips (chair): ${if(level == "beginner") "8-12" else if(level == "intermediate") "12-15" else "15-20"} reps
            ‚Ä¢ Close-grip push-ups: ${if(level == "beginner") "5-8" else if(level == "intermediate") "8-12" else "12-15"} reps
            ‚Ä¢ Tricep extensions (bottle): ${if(level == "beginner") "12-15" else if(level == "intermediate") "15-18" else "18-22"} reps
            
            üßò‚Äç‚ôÄÔ∏è **RECOVERY STRETCH** (5 minutes)
            ‚Ä¢ Chest doorway stretch: 45 seconds
            ‚Ä¢ Cross-body shoulder stretch: 30 seconds each
            ‚Ä¢ Tricep overhead stretch: 30 seconds each
            ‚Ä¢ Cobra stretch: 45 seconds
            ‚Ä¢ Child's pose: 60 seconds
            
            üí° **PUSH DAY TIPS**:
            ‚Ä¢ Focus on controlled eccentric (lowering) phase
            ‚Ä¢ Keep core tight throughout all movements
            ‚Ä¢ Progressive overload: add reps or difficulty weekly
            ‚Ä¢ Perfect form beats high reps every time
            
            **Target**: Chest, shoulders, triceps development üí™
        """.trimIndent()
    }
    
    private fun getPrebuiltPullWorkout(level: String): String {
        return """
            üéØ **PULL DAY DOMINATION** (35 minutes)
            
            üî• **DYNAMIC WARM-UP** (5 minutes)
            ‚Ä¢ Band pull-aparts (or arm swings): 20 reps
            ‚Ä¢ Shoulder blade squeezes: 15 reps
            ‚Ä¢ Cat-cow stretches: 10 reps
            ‚Ä¢ Dead hangs (if possible): 20-30 seconds
            ‚Ä¢ Reverse fly motions: 15 reps
            
            üéØ **PULL STRENGTH SEQUENCE** (25 minutes)
            
            **Phase 1: Back Foundation** (4 sets, 90s rest):
            ${when(level.lowercase()) {
                "beginner" -> """
                ‚Ä¢ Inverted rows (table/bar): 6-10 reps
                ‚Ä¢ Reverse snow angels: 12-15 reps
                ‚Ä¢ Superman holds: 20-30 seconds
                ‚Ä¢ Wall slides: 12-15 reps
                """
                "intermediate" -> """
                ‚Ä¢ Pull-ups/chin-ups: 5-8 reps (assisted if needed)
                ‚Ä¢ Single-arm rows (bottle): 10-12 each
                ‚Ä¢ Reverse flies: 12-15 reps
                ‚Ä¢ Superman + Y raises: 10-12 reps
                """
                else -> """
                ‚Ä¢ Wide-grip pull-ups: 8-12 reps
                ‚Ä¢ Archer pull-ups: 4-6 each side
                ‚Ä¢ Single-arm rows (heavy): 12-15 each
                ‚Ä¢ L-sits/tuck holds: 20-30 seconds
                """
            }}
            
            **Phase 2: Posterior Chain** (3 sets, 60s rest):
            ‚Ä¢ Face pulls (band/towel): ${if(level == "beginner") "15-20" else if(level == "intermediate") "20-25" else "25-30"} reps
            ‚Ä¢ Rear delt flies: ${if(level == "beginner") "12-15" else if(level == "intermediate") "15-18" else "18-22"} reps
            ‚Ä¢ Prone Y-T-W: ${if(level == "beginner") "8 each" else if(level == "intermediate") "10 each" else "12 each"} reps
            ‚Ä¢ Reverse planks: ${if(level == "beginner") "20-30s" else if(level == "intermediate") "30-45s" else "45-60s"}
            
            **Phase 3: Bicep Focus** (3 sets, 45s rest):
            ‚Ä¢ Bicep curls (bottles): ${if(level == "beginner") "12-15" else if(level == "intermediate") "15-18" else "18-22"} reps
            ‚Ä¢ Hammer curls: ${if(level == "beginner") "10-12" else if(level == "intermediate") "12-15" else "15-18"} reps
            ‚Ä¢ Isometric holds: ${if(level == "beginner") "15-20s" else if(level == "intermediate") "20-30s" else "30-40s"}
            
            üßò‚Äç‚ôÄÔ∏è **MOBILITY COOLDOWN** (5 minutes)
            ‚Ä¢ Lat stretches: 45 seconds each side
            ‚Ä¢ Upper trap stretch: 30 seconds each side
            ‚Ä¢ Thoracic spine twists: 10 each side
            ‚Ä¢ Doorway chest stretch: 60 seconds
            ‚Ä¢ Seated forward fold: 60 seconds
            
            üí° **PULL DAY MASTERY**:
            ‚Ä¢ Squeeze shoulder blades at top of each rep
            ‚Ä¢ Control the negative portion of movements
            ‚Ä¢ Focus on lat engagement, not just arm pulling
            ‚Ä¢ Build to full pull-ups progressively
            
            **Target**: Back, lats, rear delts, biceps üéØ
        """.trimIndent()
    }
    
    private fun getPrebuiltLegWorkout(level: String): String {
        return """
            ü¶µ **LEG DAY ANNIHILATION** (40 minutes)
            
            üî• **LOWER BODY ACTIVATION** (6 minutes)
            ‚Ä¢ Leg swings: 15 each direction
            ‚Ä¢ Hip circles: 10 each direction  
            ‚Ä¢ Bodyweight squats: 15 reps
            ‚Ä¢ Reverse lunges: 10 each leg
            ‚Ä¢ Calf raises: 20 reps
            ‚Ä¢ Glute bridges: 15 reps
            
            ü¶µ **QUAD DOMINANT PHASE** (12 minutes)
            
            **Squat Complex** (4 sets, 2 min rest):
            ${when(level.lowercase()) {
                "beginner" -> """
                ‚Ä¢ Assisted squats (chair support): 12-15 reps
                ‚Ä¢ Wall sits: 30-45 seconds
                ‚Ä¢ Step-ups (low step): 10 each leg
                ‚Ä¢ Squat pulses: 15-20 reps
                """
                "intermediate" -> """
                ‚Ä¢ Bodyweight squats: 15-20 reps
                ‚Ä¢ Jump squats: 12-15 reps
                ‚Ä¢ Bulgarian split squats: 10 each leg
                ‚Ä¢ Single-leg box step-ups: 12 each leg
                """
                else -> """
                ‚Ä¢ Pistol squat progression: 5-8 each leg
                ‚Ä¢ Jump squats with 180¬∞ turn: 10-12 reps
                ‚Ä¢ Shrimp squats: 3-5 each leg
                ‚Ä¢ Single-leg squats: 8-10 each leg
                """
            }}
            
            üçë **GLUTE & HAMSTRING PHASE** (12 minutes)
            
            **Hip Hinge Complex** (4 sets, 90s rest):
            ‚Ä¢ Single-leg deadlifts: ${if(level == "beginner") "8-10" else if(level == "intermediate") "10-12" else "12-15"} each leg
            ‚Ä¢ Glute bridges: ${if(level == "beginner") "15-20" else if(level == "intermediate") "20-25" else "25-30"} reps
            ‚Ä¢ Reverse lunges: ${if(level == "beginner") "10-12" else if(level == "intermediate") "12-15" else "15-18"} each leg
            ‚Ä¢ Lateral lunges: ${if(level == "beginner") "8-10" else if(level == "intermediate") "10-12" else "12-15"} each leg
            
            ‚ö° **EXPLOSIVE FINISHER** (5 minutes)
            **Plyometric Blast** (3 rounds, 60s rest):
            ‚Ä¢ Jump lunges: ${if(level == "beginner") "16 total" else if(level == "intermediate") "20 total" else "24 total"} reps
            ‚Ä¢ Broad jumps: ${if(level == "beginner") "5-8" else if(level == "intermediate") "8-10" else "10-12"} reps
            ‚Ä¢ Lateral bounds: ${if(level == "beginner") "10 total" else if(level == "intermediate") "12 total" else "16 total"} reps
            
            üßò‚Äç‚ôÄÔ∏è **LOWER BODY RECOVERY** (5 minutes)
            ‚Ä¢ Quad stretch: 45 seconds each leg
            ‚Ä¢ Hamstring stretch: 45 seconds each leg
            ‚Ä¢ Hip flexor stretch: 45 seconds each leg
            ‚Ä¢ Figure-4 stretch: 45 seconds each leg
            ‚Ä¢ Pigeon pose: 60 seconds each side
            
            üí° **LEG DAY EXCELLENCE**:
            ‚Ä¢ Full range of motion on all movements
            ‚Ä¢ Control the eccentric (lowering) phase
            ‚Ä¢ Drive through heels on squats/deadlifts
            ‚Ä¢ Keep knees tracking over toes
            ‚Ä¢ Progressive overload weekly
            
            **Target**: Quadriceps, glutes, hamstrings, calves ü¶µ
        """.trimIndent()
    }
    
    private fun getPrebuiltCoreWorkout(level: String): String {
        return """
            üî• **CORE CRUSHER CIRCUIT** (30 minutes)
            
            üåÖ **CORE ACTIVATION** (4 minutes)
            ‚Ä¢ Dead bugs: 10 each side
            ‚Ä¢ Bird dogs: 10 each side
            ‚Ä¢ Cat-cow stretches: 10 reps
            ‚Ä¢ Pelvic tilts: 15 reps
            ‚Ä¢ Knee-to-chest: 10 each leg
            
            üéØ **ANTERIOR CORE PHASE** (8 minutes)
            **Plank Progression** (4 sets, 45s rest):
            ${when(level.lowercase()) {
                "beginner" -> """
                ‚Ä¢ Modified plank (knees): 20-30 seconds
                ‚Ä¢ Wall plank: 30-45 seconds
                ‚Ä¢ Dead bug holds: 15 seconds each side
                ‚Ä¢ Glute bridge hold: 30 seconds
                """
                "intermediate" -> """
                ‚Ä¢ Standard plank: 45-60 seconds
                ‚Ä¢ Plank up-downs: 10-12 reps
                ‚Ä¢ Single-arm plank: 20 seconds each
                ‚Ä¢ Plank jacks: 15-20 reps
                """
                else -> """
                ‚Ä¢ Plank to push-up: 12-15 reps
                ‚Ä¢ Single-arm single-leg plank: 15s each
                ‚Ä¢ Plank with leg lifts: 20 total
                ‚Ä¢ RKC plank: 30-45 seconds
                """
            }}
            
            üå™Ô∏è **ROTATIONAL POWER** (8 minutes)
            **Anti-Rotation Circuit** (3 sets, 60s rest):
            ‚Ä¢ Russian twists: ${if(level == "beginner") "20-30" else if(level == "intermediate") "30-40" else "40-50"} total
            ‚Ä¢ Bicycle crunches: ${if(level == "beginner") "20-30" else if(level == "intermediate") "30-40" else "40-50"} total
            ‚Ä¢ Side planks: ${if(level == "beginner") "15-20s" else if(level == "intermediate") "20-30s" else "30-45s"} each
            ‚Ä¢ Wood chops (bottle): ${if(level == "beginner") "12-15" else if(level == "intermediate") "15-18" else "18-22"} each side
            
            ‚ö° **DYNAMIC CORE BLAST** (6 minutes)
            **High-Intensity Circuit** (3 rounds, 30s rest):
            ‚Ä¢ Mountain climbers: ${if(level == "beginner") "30 seconds" else if(level == "intermediate") "40 seconds" else "50 seconds"}
            ‚Ä¢ Leg raises: ${if(level == "beginner") "8-12" else if(level == "intermediate") "12-15" else "15-20"} reps
            ‚Ä¢ Flutter kicks: ${if(level == "beginner") "20 total" else if(level == "intermediate") "30 total" else "40 total"}
            ‚Ä¢ V-ups: ${if(level == "beginner") "8-10" else if(level == "intermediate") "10-15" else "15-20"} reps
            
            üßò‚Äç‚ôÄÔ∏è **CORE RELEASE** (4 minutes)
            ‚Ä¢ Child's pose: 60 seconds
            ‚Ä¢ Cobra stretch: 45 seconds
            ‚Ä¢ Knee rocks: 30 seconds
            ‚Ä¢ Spinal twists: 30 seconds each side
            ‚Ä¢ Happy baby pose: 45 seconds
            
            üí° **CORE MASTERY TIPS**:
            ‚Ä¢ Breathe consistently - don't hold breath
            ‚Ä¢ Quality over quantity - perfect form first
            ‚Ä¢ Engage deep core muscles, not just abs
            ‚Ä¢ Progress holds before adding reps
            ‚Ä¢ Core strength supports all other movements
            
            **Target**: Rectus abdominis, obliques, transverse abdominis, deep core üî•
        """.trimIndent()
    }
    
    private fun getPrebuiltHIITWorkout(level: String): String {
        return """
            ‚ö° **HIGH-INTENSITY INTERVAL TRAINING** (25 minutes)
            
            üî• **HIIT PREP** (4 minutes)
            ‚Ä¢ Marching in place: 60 seconds
            ‚Ä¢ Arm circles: 30 seconds each direction
            ‚Ä¢ Leg swings: 15 each leg
            ‚Ä¢ Light jumping jacks: 60 seconds
            ‚Ä¢ Bodyweight squats: 15 reps
            
            ‚ö° **HIIT PHASE 1: POWER** (8 minutes)
            **Tabata Protocol** (4 rounds, 20s work / 10s rest):
            ${when(level.lowercase()) {
                "beginner" -> """
                Round 1: Modified jumping jacks
                Round 2: Step-ups (low step)
                Round 3: Modified burpees (no jump)
                Round 4: High knees (moderate pace)
                Rest 2 minutes between phases
                """
                "intermediate" -> """
                Round 1: Jumping jacks
                Round 2: Burpees
                Round 3: Jump squats
                Round 4: Mountain climbers
                Rest 90 seconds between phases
                """
                else -> """
                Round 1: Burpee box jumps
                Round 2: Jump squat to tuck jump
                Round 3: Burpee broad jumps
                Round 4: Sprint in place
                Rest 60 seconds between phases
                """
            }}
            
            üèÉ **HIIT PHASE 2: ENDURANCE** (8 minutes)
            **EMOM (Every Minute On Minute)** for 8 minutes:
            ‚Ä¢ Minute 1: ${if(level == "beginner") "10 squats + 5 push-ups" else if(level == "intermediate") "15 squats + 8 push-ups" else "20 squats + 12 push-ups"}
            ‚Ä¢ Minute 2: ${if(level == "beginner") "20 high knees + 10 lunges" else if(level == "intermediate") "30 high knees + 12 lunges" else "40 high knees + 16 lunges"}
            ‚Ä¢ Minute 3: ${if(level == "beginner") "15 jumping jacks + plank 15s" else if(level == "intermediate") "25 jumping jacks + plank 30s" else "35 jumping jacks + plank 45s"}
            ‚Ä¢ Minute 4: ${if(level == "beginner") "8 burpees (modified)" else if(level == "intermediate") "12 burpees" else "15 burpees"}
            
            **Repeat this 4-minute cycle twice**
            
            üßò‚Äç‚ôÄÔ∏è **ACTIVE RECOVERY** (5 minutes)
            ‚Ä¢ Walking in place: 90 seconds
            ‚Ä¢ Gentle arm swings: 45 seconds
            ‚Ä¢ Hip circles: 30 seconds each direction
            ‚Ä¢ Calf stretch: 30 seconds each leg
            ‚Ä¢ Deep breathing: 90 seconds
            
            üí° **HIIT OPTIMIZATION**:
            ‚Ä¢ Push maximum effort during work periods
            ‚Ä¢ Use rest periods for complete recovery
            ‚Ä¢ Modify exercises to maintain intensity
            ‚Ä¢ Stay hydrated throughout
            ‚Ä¢ Track improvements weekly
            
            **Benefits**: Maximum calorie burn, improved VO2 max, time-efficient ‚ö°
        """.trimIndent()
    }
    
    private fun getPrebuiltYogaFlow(level: String): String {
        return """
            üßò‚Äç‚ôÄÔ∏è **MINDFUL YOGA FLOW** (35 minutes)
            
            üåÖ **CENTERING & BREATH** (5 minutes)
            ‚Ä¢ Comfortable seated position: 2 minutes
            ‚Ä¢ Deep belly breathing: 2 minutes
            ‚Ä¢ Gentle neck rolls: 5 each direction
            ‚Ä¢ Shoulder shrugs: 10 reps
            
            üåä **WARM-UP FLOW** (8 minutes)
            **Sun Salutation Prep**:
            ${when(level.lowercase()) {
                "beginner" -> """
                ‚Ä¢ Mountain Pose: 1 minute
                ‚Ä¢ Forward fold (bent knees): 1 minute
                ‚Ä¢ Half lift: 30 seconds
                ‚Ä¢ Low lunge (each leg): 1 minute each
                ‚Ä¢ Downward dog (knees down): 1 minute
                ‚Ä¢ Child's pose: 2 minutes
                """
                "intermediate" -> """
                ‚Ä¢ Mountain Pose to Forward Fold: 2 minutes
                ‚Ä¢ Low lunge to High lunge: 1 minute each leg
                ‚Ä¢ Warrior I flow: 1 minute each side  
                ‚Ä¢ Downward dog: 2 minutes
                ‚Ä¢ Child's pose: 1 minute
                """
                else -> """
                ‚Ä¢ Full Sun Salutation A: 3 rounds
                ‚Ä¢ Sun Salutation B with Warriors: 2 rounds
                ‚Ä¢ Advanced arm balances prep: 2 minutes
                """
            }}
            
            üî• **STRENGTH & FLOW** (15 minutes)
            **Standing Sequence**:
            ‚Ä¢ Warrior II: ${if(level == "beginner") "1 min" else if(level == "intermediate") "90s" else "2 min"} each side
            ‚Ä¢ Extended side angle: ${if(level == "beginner") "45s" else if(level == "intermediate") "60s" else "90s"} each
            ‚Ä¢ Triangle pose: ${if(level == "beginner") "45s" else if(level == "intermediate") "60s" else "90s"} each
            ‚Ä¢ Revolved triangle: ${if(level == "beginner") "30s" else if(level == "intermediate") "45s" else "60s"} each
            
            **Floor Sequence**:
            ‚Ä¢ Cat-cow flows: ${if(level == "beginner") "10" else if(level == "intermediate") "15" else "20"} reps
            ‚Ä¢ Low lunge twists: ${if(level == "beginner") "30s" else if(level == "intermediate") "45s" else "60s"} each
            ‚Ä¢ Pigeon prep: ${if(level == "beginner") "1 min" else if(level == "intermediate") "90s" else "2 min"} each side
            ‚Ä¢ Bridge pose: ${if(level == "beginner") "45s" else if(level == "intermediate") "60s" else "90s"}
            
            üßò‚Äç‚ôÄÔ∏è **DEEP STRETCH & RESTORE** (7 minutes)
            ‚Ä¢ Seated forward fold: 2 minutes
            ‚Ä¢ Seated spinal twist: 1 minute each side
            ‚Ä¢ Legs up the wall: 2 minutes
            ‚Ä¢ Happy baby: 1 minute
            ‚Ä¢ Final savasana: As long as desired
            
            üí° **YOGA WISDOM**:
            ‚Ä¢ Listen to your body's limits
            ‚Ä¢ Breath guides the movement
            ‚Ä¢ Modifications are always available
            ‚Ä¢ Focus inward, not on others
            ‚Ä¢ Progress is measured in peace, not poses
            
            **Benefits**: Flexibility, balance, mindfulness, stress relief üßò‚Äç‚ôÄÔ∏è
        """.trimIndent()
    }
    
    private fun getPrebuiltPilatesWorkout(level: String): String {
        return """
            üéØ **PILATES PRECISION** (30 minutes)
            
            üåÖ **PILATES WARM-UP** (5 minutes)
            ‚Ä¢ Hundred prep breathing: 2 minutes
            ‚Ä¢ Pelvic tilts: 15 reps
            ‚Ä¢ Spine articulation: 10 roll downs
            ‚Ä¢ Shoulder blade isolation: 15 reps
            ‚Ä¢ Hip circles: 10 each direction
            
            üí™ **CORE FOUNDATION** (10 minutes)
            **Classical Series**:
            ${when(level.lowercase()) {
                "beginner" -> """
                ‚Ä¢ Modified Hundred: 50 pumps
                ‚Ä¢ Single leg stretches: 10 each leg
                ‚Ä¢ Double leg stretch prep: 10 reps
                ‚Ä¢ Spine stretch forward: 10 reps
                ‚Ä¢ Rolling like a ball prep: 10 reps
                """
                "intermediate" -> """
                ‚Ä¢ The Hundred: 100 pumps
                ‚Ä¢ Single leg stretches: 10 each leg
                ‚Ä¢ Double leg stretches: 10 reps
                ‚Ä¢ Single straight leg: 10 each leg
                ‚Ä¢ Criss-cross: 10 each side
                """
                else -> """
                ‚Ä¢ The Hundred: 100 pumps
                ‚Ä¢ Roll up: 10 reps
                ‚Ä¢ Single leg circles: 5 each direction/leg
                ‚Ä¢ Rolling like a ball: 10 reps
                ‚Ä¢ Series of 5: Complete sequence
                """
            }}
            
            üèÉ **STRENGTH & STABILITY** (10 minutes)
            **Full Body Integration**:
            ‚Ä¢ Plank series: ${if(level == "beginner") "3 x 20s" else if(level == "intermediate") "3 x 45s" else "3 x 60s"}
            ‚Ä¢ Side planks: ${if(level == "beginner") "20s each" else if(level == "intermediate") "30s each" else "45s each"}
            ‚Ä¢ Swimming: ${if(level == "beginner") "10 reps" else if(level == "intermediate") "15 reps" else "20 reps"}
            ‚Ä¢ Leg pull front: ${if(level == "beginner") "5 reps" else if(level == "intermediate") "8 reps" else "10 reps"}
            ‚Ä¢ Teaser prep: ${if(level == "beginner") "8 reps" else if(level == "intermediate") "10 reps" else "12 reps"}
            
            üßò‚Äç‚ôÄÔ∏è **STRETCH & RELEASE** (5 minutes)
            ‚Ä¢ Spine twist: 5 each side
            ‚Ä¢ Saw: 5 each side
            ‚Ä¢ Hip flexor stretch: 45 seconds each
            ‚Ä¢ Chest expansion: 1 minute
            ‚Ä¢ Child's pose: 2 minutes
            
            üí° **PILATES PRINCIPLES**:
            ‚Ä¢ Quality over quantity always
            ‚Ä¢ Engage deep core throughout
            ‚Ä¢ Precise, controlled movements
            ‚Ä¢ Mind-body connection essential
            ‚Ä¢ Breath coordinates with movement
            
            **Target**: Deep core, posture, body awareness üéØ
        """.trimIndent()
    }
    
    private fun getPrebuiltUpperBodyWorkout(level: String): String {
        return """
            üí™ **UPPER BODY SCULPT** (35 minutes)
            
            üî• **UPPER BODY PREP** (5 minutes)
            ‚Ä¢ Arm circles: 20 each direction
            ‚Ä¢ Shoulder shrugs: 15 reps
            ‚Ä¢ Cross-body stretches: 30s each arm
            ‚Ä¢ Wall push-ups: 10 reps
            ‚Ä¢ Band pull-aparts: 20 reps (or arm swings)
            
            üí™ **PUSH COMPLEX** (10 minutes)
            **Circuit A** (3 rounds, 90s rest):
            ${when(level.lowercase()) {
                "beginner" -> """
                ‚Ä¢ Wall push-ups: 12-15 reps
                ‚Ä¢ Incline push-ups: 8-10 reps
                ‚Ä¢ Tricep dips (chair): 8-10 reps
                ‚Ä¢ Overhead press (bottles): 10-12 reps
                """
                "intermediate" -> """
                ‚Ä¢ Standard push-ups: 12-15 reps
                ‚Ä¢ Diamond push-ups: 8-10 reps
                ‚Ä¢ Pike push-ups: 8-10 reps
                ‚Ä¢ Tricep dips: 12-15 reps
                """
                else -> """
                ‚Ä¢ One-arm push-up progression: 5 each
                ‚Ä¢ Handstand push-ups: 5-8 reps
                ‚Ä¢ Archer push-ups: 6 each side
                ‚Ä¢ Hindu push-ups: 10 reps
                """
            }}
            
            üéØ **PULL COMPLEX** (10 minutes)
            **Circuit B** (3 rounds, 90s rest):
            ‚Ä¢ Inverted rows: ${if(level == "beginner") "8-10" else if(level == "intermediate") "10-12" else "12-15"} reps
            ‚Ä¢ Reverse flies: ${if(level == "beginner") "12-15" else if(level == "intermediate") "15-18" else "18-20"} reps
            ‚Ä¢ Bicep curls (bottles): ${if(level == "beginner") "12-15" else if(level == "intermediate") "15-18" else "18-22"} reps
            ‚Ä¢ Face pulls: ${if(level == "beginner") "15-18" else if(level == "intermediate") "18-22" else "22-25"} reps
            
            ‚ö° **UPPER BODY FINISHER** (5 minutes)
            **Burnout Round** (2 sets, 60s rest):
            ‚Ä¢ Max push-ups: ${if(level == "beginner") "AMRAP 30s" else if(level == "intermediate") "AMRAP 45s" else "AMRAP 60s"}
            ‚Ä¢ Plank hold: ${if(level == "beginner") "30s" else if(level == "intermediate") "45s" else "60s"}
            ‚Ä¢ Arm circles: 20 each direction
            
            üßò‚Äç‚ôÄÔ∏è **UPPER BODY STRETCH** (5 minutes)
            ‚Ä¢ Doorway chest stretch: 60 seconds
            ‚Ä¢ Overhead tricep stretch: 30s each
            ‚Ä¢ Cross-body shoulder: 30s each
            ‚Ä¢ Neck side stretches: 30s each
            ‚Ä¢ Eagle arms: 45 seconds
            
            üí° **UPPER BODY EXCELLENCE**:
            ‚Ä¢ Full range of motion on all exercises
            ‚Ä¢ Control the negative (lowering) phase
            ‚Ä¢ Maintain proper shoulder positioning
            ‚Ä¢ Progressive overload weekly
            ‚Ä¢ Balance push/pull movements
            
            **Target**: Chest, back, shoulders, arms üí™
        """.trimIndent()
    }
    
    private fun getPrebuiltLowerBodyWorkout(level: String): String {
        return """
            ü¶µ **LOWER BODY TRANSFORMATION** (35 minutes)
            
            üî• **LOWER BODY MOBILITY** (6 minutes)
            ‚Ä¢ Hip circles: 10 each direction
            ‚Ä¢ Leg swings: 15 each direction
            ‚Ä¢ Walking lunges: 10 each leg
            ‚Ä¢ Calf raises: 20 reps
            ‚Ä¢ Glute activation: 15 bridges
            ‚Ä¢ Ankle circles: 10 each direction
            
            üèãÔ∏è **GLUTE & HAMSTRING FOCUS** (12 minutes)
            **Posterior Chain Circuit** (3 rounds, 2 min rest):
            ${when(level.lowercase()) {
                "beginner" -> """
                ‚Ä¢ Glute bridges: 15-20 reps
                ‚Ä¢ Single-leg deadlift (assisted): 8 each leg
                ‚Ä¢ Wall sits: 30-45 seconds
                ‚Ä¢ Clamshells: 15 each side
                """
                "intermediate" -> """
                ‚Ä¢ Single-leg glute bridges: 12 each leg
                ‚Ä¢ Single-leg deadlifts: 10 each leg
                ‚Ä¢ Bulgarian split squats: 10 each leg
                ‚Ä¢ Lateral lunges: 12 each leg
                """
                else -> """
                ‚Ä¢ Single-leg hip thrusts: 15 each leg
                ‚Ä¢ Single-leg RDL (weighted): 12 each leg
                ‚Ä¢ Curtsy to reverse lunge: 10 each leg
                ‚Ä¢ Single-leg wall sits: 30s each leg
                """
            }}
            
            üí• **QUAD DOMINANT PHASE** (12 minutes)
            **Squat Complex** (3 rounds, 90s rest):
            ‚Ä¢ Bodyweight squats: ${if(level == "beginner") "15-20" else if(level == "intermediate") "20-25" else "25-30"} reps
            ‚Ä¢ Jump squats: ${if(level == "beginner") "8-10" else if(level == "intermediate") "10-15" else "15-20"} reps
            ‚Ä¢ Pulse squats: ${if(level == "beginner") "15" else if(level == "intermediate") "20" else "25"} reps
            ‚Ä¢ Single-leg squats: ${if(level == "beginner") "5 assisted" else if(level == "intermediate") "5-8 each" else "8-12 each"} leg
            
            ‚ö° **PLYOMETRIC BLAST** (5 minutes)
            **Power Circuit** (3 rounds, 45s rest):
            ‚Ä¢ Broad jumps: ${if(level == "beginner") "5-8" else if(level == "intermediate") "8-10" else "10-12"} reps
            ‚Ä¢ Lateral bounds: ${if(level == "beginner") "10 total" else if(level == "intermediate") "12 total" else "16 total"}
            ‚Ä¢ Jump lunges: ${if(level == "beginner") "12 total" else if(level == "intermediate") "16 total" else "20 total"}
            
            üßò‚Äç‚ôÄÔ∏è **LOWER BODY RELEASE** (5 minutes)
            ‚Ä¢ Quad stretch: 45 seconds each leg
            ‚Ä¢ Hamstring stretch: 45 seconds each leg
            ‚Ä¢ Hip flexor stretch: 45 seconds each leg
            ‚Ä¢ Figure-4 stretch: 45 seconds each leg
            ‚Ä¢ Child's pose: 60 seconds
            
            üí° **LOWER BODY MASTERY**:
            ‚Ä¢ Activate glutes before squatting
            ‚Ä¢ Keep knees tracking over toes
            ‚Ä¢ Full depth on all movements
            ‚Ä¢ Control eccentric phase
            ‚Ä¢ Progressive overload essential
            
            **Target**: Glutes, quads, hamstrings, calves ü¶µ
        """.trimIndent()
    }
    
    private fun getPrebuiltFunctionalWorkout(level: String): String {
        return """
            üèÉ‚Äç‚ôÇÔ∏è **FUNCTIONAL FITNESS** (30 minutes)
            
            üî• **MOVEMENT PREP** (5 minutes)
            ‚Ä¢ Arm circles: 15 each direction
            ‚Ä¢ Leg swings: 12 each direction
            ‚Ä¢ Hip circles: 10 each direction
            ‚Ä¢ Torso twists: 15 each side
            ‚Ä¢ Light bouncing: 45 seconds
            
            üí™ **FUNCTIONAL PATTERNS** (20 minutes)
            
            **Circuit 1: Push/Pull/Squat** (3 rounds, 90s rest):
            ${when(level.lowercase()) {
                "beginner" -> """
                ‚Ä¢ Push-ups (modified): 8-10 reps
                ‚Ä¢ Inverted rows (table): 8-10 reps
                ‚Ä¢ Squats: 12-15 reps
                ‚Ä¢ Plank: 30 seconds
                """
                "intermediate" -> """
                ‚Ä¢ Push-ups: 12-15 reps
                ‚Ä¢ Pull-ups/chin-ups: 5-8 reps
                ‚Ä¢ Jump squats: 12-15 reps
                ‚Ä¢ Mountain climbers: 30 seconds
                """
                else -> """
                ‚Ä¢ One-arm push-ups: 5 each arm
                ‚Ä¢ Wide-grip pull-ups: 8-10 reps
                ‚Ä¢ Pistol squats: 5 each leg
                ‚Ä¢ Burpees: 10 reps
                """
            }}
            
            **Circuit 2: Hinge/Lunge/Carry** (3 rounds, 90s rest):
            ‚Ä¢ Single-leg deadlift: ${if(level == "beginner") "8 each leg" else if(level == "intermediate") "10 each leg" else "12 each leg"}
            ‚Ä¢ Walking lunges: ${if(level == "beginner") "16 total" else if(level == "intermediate") "20 total" else "24 total"}
            ‚Ä¢ Farmer's walk (bottles): ${if(level == "beginner") "30 seconds" else if(level == "intermediate") "45 seconds" else "60 seconds"}
            ‚Ä¢ Bear crawl: ${if(level == "beginner") "20 seconds" else if(level == "intermediate") "30 seconds" else "45 seconds"}
            
            **Circuit 3: Rotation/Gait** (2 rounds, 60s rest):
            ‚Ä¢ Wood chops: ${if(level == "beginner") "12 each side" else if(level == "intermediate") "15 each side" else "18 each side"}
            ‚Ä¢ Crab walk: ${if(level == "beginner") "10 steps each way" else if(level == "intermediate") "15 steps each way" else "20 steps each way"}
            ‚Ä¢ Lateral shuffles: ${if(level == "beginner") "20 seconds" else if(level == "intermediate") "30 seconds" else "40 seconds"}
            
            üßò‚Äç‚ôÄÔ∏è **MOBILITY FLOW** (5 minutes)
            ‚Ä¢ Hip flexor stretch: 45 seconds each leg
            ‚Ä¢ Thoracic spine rotation: 30 seconds each side
            ‚Ä¢ Calf stretch: 30 seconds each leg
            ‚Ä¢ Shoulder crossover: 30 seconds each arm
            ‚Ä¢ Deep breathing: 90 seconds
            
            üí° **FUNCTIONAL TRAINING**:
            ‚Ä¢ Movement quality over quantity
            ‚Ä¢ Train patterns, not just muscles
            ‚Ä¢ Multi-planar movement essential
            ‚Ä¢ Real-world strength and mobility
            ‚Ä¢ Injury prevention through movement
            
            **Benefits**: Real-world strength, movement quality, injury prevention üèÉ‚Äç‚ôÇÔ∏è
        """.trimIndent()
    }
    
    private fun getPrebuiltFullBodyWorkout(level: String): String {
        return """
            üéØ **COMPLETE FULL-BODY TRAINING** (40 minutes)
            
            üî• **TOTAL BODY WARM-UP** (6 minutes)
            ‚Ä¢ Jumping jacks: 60 seconds
            ‚Ä¢ Arm circles: 30 seconds each direction
            ‚Ä¢ Leg swings: 15 each direction
            ‚Ä¢ Hip circles: 10 each direction
            ‚Ä¢ Bodyweight squats: 15 reps
            ‚Ä¢ Push-up position hold: 30 seconds
            
            üí™ **COMPOUND MOVEMENTS** (28 minutes)
            
            **Round 1: Foundation** (4 sets, 2 min rest):
            ${when(level.lowercase()) {
                "beginner" -> """
                ‚Ä¢ Push-ups (modified): 8-12 reps
                ‚Ä¢ Bodyweight squats: 12-15 reps
                ‚Ä¢ Inverted rows (table): 8-10 reps
                ‚Ä¢ Plank hold: 30-45 seconds
                """
                "intermediate" -> """
                ‚Ä¢ Push-ups: 12-15 reps
                ‚Ä¢ Jump squats: 12-15 reps
                ‚Ä¢ Pull-ups/chin-ups: 6-10 reps
                ‚Ä¢ Single-leg deadlifts: 8 each leg
                """
                else -> """
                ‚Ä¢ One-arm push-ups: 5 each arm
                ‚Ä¢ Pistol squats: 5 each leg
                ‚Ä¢ Muscle-ups: 3-5 reps
                ‚Ä¢ Single-leg RDL (weighted): 10 each leg
                """
            }}
            
            **Round 2: Power & Conditioning** (3 sets, 90s rest):
            ‚Ä¢ Burpees: ${if(level == "beginner") "5-8" else if(level == "intermediate") "8-12" else "12-15"} reps
            ‚Ä¢ Mountain climbers: ${if(level == "beginner") "30 seconds" else if(level == "intermediate") "45 seconds" else "60 seconds"}
            ‚Ä¢ Lunges: ${if(level == "beginner") "16 total" else if(level == "intermediate") "20 total" else "24 total"}
            ‚Ä¢ Russian twists: ${if(level == "beginner") "20" else if(level == "intermediate") "30" else "40"} total
            
            **Round 3: Strength Endurance** (3 sets, 60s rest):
            ‚Ä¢ Wall sits: ${if(level == "beginner") "30-45s" else if(level == "intermediate") "45-60s" else "60-90s"}
            ‚Ä¢ Pike push-ups: ${if(level == "beginner") "5-8" else if(level == "intermediate") "8-12" else "12-15"} reps
            ‚Ä¢ Single-leg glute bridges: ${if(level == "beginner") "10 each" else if(level == "intermediate") "12 each" else "15 each"}
            ‚Ä¢ Dead bugs: ${if(level == "beginner") "10 each side" else if(level == "intermediate") "12 each side" else "15 each side"}
            
            üßò‚Äç‚ôÄÔ∏è **TOTAL BODY STRETCH** (6 minutes)
            ‚Ä¢ Child's pose: 90 seconds
            ‚Ä¢ Downward dog: 60 seconds
            ‚Ä¢ Hip flexor stretch: 45 seconds each leg
            ‚Ä¢ Spinal twist: 30 seconds each side
            ‚Ä¢ Deep breathing meditation: 90 seconds
            
            üí° **FULL-BODY TRAINING**:
            ‚Ä¢ Compound movements maximize efficiency
            ‚Ä¢ Balance pushing and pulling patterns
            ‚Ä¢ Include uni-lateral (single-limb) work
            ‚Ä¢ Progressive overload for continued gains
            ‚Ä¢ Recovery is when adaptation occurs
            
            **Target**: Complete muscular and cardiovascular development üéØ
        """.trimIndent()
    }

    // Generate a fallback response when API fails
    private fun generateFallbackResponse(prompt: String): String {
        Log.d(TAG, "üõ°Ô∏è Generating fallback response for prompt: ${prompt.take(100)}...")
        
        // Extract key information from the prompt to customize the fallback
        val containsWorkout = prompt.contains("workout", ignoreCase = true)
        val containsForm = prompt.contains("form", ignoreCase = true) || prompt.contains("technique", ignoreCase = true)
        val containsWarmUp = prompt.contains("warm-up", ignoreCase = true) || prompt.contains("warmup", ignoreCase = true)
        
        return when {
            containsForm -> """
                üèãÔ∏è **PROPER FORM GUIDE**
                
                Form is crucial for effective and safe workouts! Here are some universal principles:
                
                ‚úÖ **GENERAL PRINCIPLES:**
                ‚Ä¢ Keep your spine neutral during most exercises
                ‚Ä¢ Breathe out during exertion (the hard part)
                ‚Ä¢ Focus on controlled movements, not momentum
                ‚Ä¢ Start with lighter weights to master form
                
                üí™ **COMMON EXERCISES:**
                
                **Squats:**
                ‚Ä¢ Feet shoulder-width apart
                ‚Ä¢ Keep chest up, back straight
                ‚Ä¢ Push knees outward (don't collapse inward)
                ‚Ä¢ Descend until thighs are parallel to ground
                
                **Push-ups:**
                ‚Ä¢ Hands slightly wider than shoulders
                ‚Ä¢ Body forms straight line from head to heels
                ‚Ä¢ Lower chest to ground, elbows at 45¬∞ angle
                ‚Ä¢ Core engaged throughout movement
                
                **Planks:**
                ‚Ä¢ Forearms parallel on ground
                ‚Ä¢ Body straight from head to heels
                ‚Ä¢ Engage core by pulling navel to spine
                ‚Ä¢ Don't let hips sag or pike up
                
                Remember: Quality reps beat quantity every time! üíØ
            """.trimIndent()
            
            containsWarmUp -> """
                üî• **ESSENTIAL WARM-UP ROUTINE**
                
                Always warm up properly to prevent injury and maximize performance!
                
                **1. PULSE RAISERS (3-5 minutes)**
                ‚Ä¢ Light jogging in place: 1 minute
                ‚Ä¢ Jumping jacks: 30 seconds
                ‚Ä¢ High knees: 30 seconds
                ‚Ä¢ Butt kicks: 30 seconds
                ‚Ä¢ Repeat cycle if needed
                
                **2. DYNAMIC STRETCHES (4-5 minutes)**
                ‚Ä¢ Arm circles: 10 forward, 10 backward
                ‚Ä¢ Torso twists: 10 each side
                ‚Ä¢ Hip circles: 10 each direction
                ‚Ä¢ Walking lunges with twist: 10 each leg
                ‚Ä¢ Leg swings: 10 each leg
                
                **3. ACTIVATION (2-3 minutes)**
                ‚Ä¢ Bodyweight squats: 15 reps
                ‚Ä¢ Push-ups or incline push-ups: 10 reps
                ‚Ä¢ Glute bridges: 15 reps
                
                This warm-up takes about 10 minutes and prepares your entire body for any workout!
            """.trimIndent()
            
            containsWorkout -> """
                üí™ **COMPLETE FULL-BODY WORKOUT**
                
                This balanced workout targets all major muscle groups for strength and conditioning!
                
                üî• **WARM-UP (5 minutes)**
                ‚Ä¢ Jumping jacks: 30 seconds
                ‚Ä¢ Arm circles: 20 each direction
                ‚Ä¢ Bodyweight squats: 15 reps
                ‚Ä¢ Push-up position plank: 30 seconds
                
                üí™ **MAIN WORKOUT (25 minutes)**
                
                **Circuit 1: Lower Body Focus (3 rounds)**
                ‚Ä¢ Bodyweight squats: 15-20 reps
                ‚Ä¢ Alternating lunges: 10 each leg
                ‚Ä¢ Glute bridges: 15-20 reps
                ‚Ä¢ Rest: 60 seconds between rounds
                
                **Circuit 2: Upper Body Focus (3 rounds)**
                ‚Ä¢ Push-ups (modify as needed): 10-15 reps
                ‚Ä¢ Superman back extensions: 12-15 reps
                ‚Ä¢ Tricep dips (using chair/bench): 12-15 reps
                ‚Ä¢ Rest: 60 seconds between rounds
                
                **Circuit 3: Core Strength (3 rounds)**
                ‚Ä¢ Plank: 30-45 seconds
                ‚Ä¢ Bicycle crunches: 20 total (10 each side)
                ‚Ä¢ Mountain climbers: 20 total (10 each side)
                ‚Ä¢ Rest: 60 seconds between rounds
                
                üßò **COOL-DOWN (5 minutes)**
                ‚Ä¢ Quad stretch: 30 seconds each leg
                ‚Ä¢ Hamstring stretch: 30 seconds each leg
                ‚Ä¢ Chest stretch: 30 seconds each arm
                ‚Ä¢ Child's pose: 30 seconds
                
                üí° **WORKOUT TIPS:**
                ‚Ä¢ Focus on form over speed
                ‚Ä¢ Breathe properly throughout
                ‚Ä¢ Modify exercises as needed for your fitness level
                ‚Ä¢ Stay hydrated during your workout
                
                Complete this workout 2-3 times per week with rest days in between for best results!
            """.trimIndent()
            
            else -> """
                üëã **FITSOUL AI COACH**
                
                I'm your personal fitness assistant! While I'm currently experiencing connectivity issues, I'm here to help with:
                
                üí™ **WORKOUT PLANNING**
                ‚Ä¢ Personalized routines based on your goals
                ‚Ä¢ Exercises for specific muscle groups
                ‚Ä¢ Workouts for any fitness level
                
                üéØ **FORM GUIDANCE**
                ‚Ä¢ Proper technique for common exercises
                ‚Ä¢ Safety tips to prevent injury
                ‚Ä¢ Modifications for different fitness levels
                
                üìä **FITNESS TRACKING**
                ‚Ä¢ Progress monitoring suggestions
                ‚Ä¢ Performance metrics to track
                ‚Ä¢ Goal-setting strategies
                
                Just let me know what specific fitness help you need, and I'll provide expert guidance based on established training principles!
            """.trimIndent()
        }
    }

    // Simple test method to debug API issues
    suspend fun testApiConnection(): Result<String> = withContext(Dispatchers.IO) {
        try {
            Log.d(TAG, "üß™ Testing API connection status...")
            
            // Check if we have an API key first
            if (apiKey.isBlank()) {
                Log.d(TAG, "‚ö†Ô∏è No API key configured")
                return@withContext Result.success(
                    """
                    üîß **FitSoul AI Service Status**
                    
                    **Status**: ‚ö†Ô∏è API Key Not Configured
                    
                    **Current Mode**: Enhanced Static Workouts
                    - ‚úÖ High-quality workout plans available
                    - ‚úÖ Goal-specific exercise recommendations
                    - ‚úÖ Form tips and safety guidance
                    - ‚úÖ Progressive difficulty scaling
                    
                    **To Enable AI Power**:
                    1. Get a free API key from https://openrouter.ai
                    2. Add it to gradle.properties: OPENROUTER_API_KEY=your_key_here
                    3. Rebuild the app
                    
                    **Note**: The app works great even without AI! üí™
                    """.trimIndent()
                )
            }
            
            // Test with API key
            Log.d(TAG, "üåê Testing OpenRouter API connection...")
            
            val testJson = buildJsonObject {
                put("model", model)
                putJsonArray("messages") {
                    addJsonObject {
                        put("role", "user")
                        put("content", "Respond with exactly: 'API Connection Successful'")
                    }
                }
                put("max_tokens", 20)
                put("temperature", 0.1)
            }
            
            val requestBody = testJson.toString().toRequestBody("application/json".toMediaType())
            
            val request = Request.Builder()
                .url("$baseUrl/chat/completions")
                .addHeader("Content-Type", "application/json")
                .addHeader("Authorization", "Bearer $apiKey")
                .addHeader("HTTP-Referer", "https://fitsoul.app")
                .addHeader("X-Title", "Fitsoul AI Test")
                .post(requestBody)
                .build()
            
            val response = client.newCall(request).execute()
            val responseBody = response.body?.string() ?: "No response body"
            
            Log.d(TAG, "üì° API Test Response Code: ${response.code}")
            Log.d(TAG, "üì° API Test Response: ${responseBody.take(200)}...")
            
            return@withContext when {
                response.isSuccessful -> {
                    Result.success(
                        """
                        üéâ **AI Connection Test Successful!**
                        
                        **Status**: ‚úÖ OpenRouter API Connected
                        **Model**: $model
                        **Features Available**:
                        - ü§ñ AI-powered workout generation
                        - üéØ Personalized exercise recommendations  
                        - üìù Intelligent form feedback
                        - üîÑ Adaptive workout planning
                        
                        **Response Preview**:
                        ${responseBody.take(100)}...
                        
                        Ready to create amazing workouts! üí™
                        """.trimIndent()
                    )
                }
                response.code == 401 -> {
                    Result.success(
                        """
                        ‚ö†Ô∏è **API Key Authentication Failed**
                        
                        **Status**: ‚ùå Invalid or Expired API Key
                        **Current Mode**: Enhanced Static Workouts
                        
                        **To Fix**:
                        1. Check your OpenRouter API key at https://openrouter.ai
                        2. Ensure it's correctly added to gradle.properties
                        3. Rebuild the app
                        
                        **Note**: App continues to work with high-quality static workouts! üí™
                        """.trimIndent()
                    )
                }
                response.code == 429 -> {
                    Result.success(
                        """
                        ‚è≥ **Rate Limit Reached**
                        
                        **Status**: ‚ö†Ô∏è Too Many Requests
                        **Current Mode**: Enhanced Static Workouts
                        
                        **This is Normal**: Free tier has usage limits
                        **App Behavior**: Automatically uses static workouts
                        
                        Try again in a few minutes, or upgrade your OpenRouter plan for higher limits.
                        """.trimIndent()
                    )
                }
                else -> {
                    Result.success(
                        """
                        üîß **API Connection Issue**
                        
                        **Status**: ‚ö†Ô∏è Connection Error (${response.code})
                        **Current Mode**: Enhanced Static Workouts
                        
                        **Error**: ${response.message}
                        **Fallback**: App continues with high-quality static workouts
                        
                        This is handled gracefully - your workouts are still amazing! üí™
                        """.trimIndent()
                    )
                }
            }
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå API connection test failed", e)
            return@withContext Result.success(
                """
                üõ°Ô∏è **Connection Test Failed**
                
                **Status**: ‚ö†Ô∏è Network or Configuration Issue
                **Current Mode**: Enhanced Static Workouts
                
                **Error**: ${e.message}
                **Fallback**: App works perfectly with static workouts
                
                No worries - you still get fantastic workout plans! üí™
                """.trimIndent()
            )
        }
    }
    
    // Additional fallback methods
    private fun generateFallbackQuickWorkout(duration: Int, equipment: String = "bodyweight"): String {
        return """
            üî• **Quick $duration-Minute FitSoul Workout**
            
            ‚ö° **High-Energy Circuit** (Complete 2-3 rounds):
            
            üí™ **Round 1: Power Moves**
            ‚Ä¢ Jumping Jacks: 30 seconds
            ‚Ä¢ Push-ups: 15 reps (modify as needed)
            ‚Ä¢ Bodyweight Squats: 20 reps
            ‚Ä¢ Plank Hold: 30 seconds
            ‚Ä¢ Rest: 30 seconds
            
            üèÉ **Round 2: Cardio Blast**
            ‚Ä¢ High Knees: 30 seconds
            ‚Ä¢ Burpees: 8-10 reps
            ‚Ä¢ Mountain Climbers: 30 seconds
            ‚Ä¢ Lunges: 10 per leg
            ‚Ä¢ Rest: 30 seconds
            
            üéØ **Finisher (if time allows)**:
            ‚Ä¢ Wall Sit: 45 seconds
            ‚Ä¢ Calf Raises: 20 reps
            
            üí° **Quick Tips**:
            ‚Ä¢ Stay hydrated during your workout
            ‚Ä¢ Focus on form over speed
            ‚Ä¢ Take breaks when needed
            ‚Ä¢ You've got this! üí™
            
            **Equipment Used**: $equipment
            **Total Time**: Approximately $duration minutes
        """.trimIndent()
    }
    
    private fun generateFallbackFormTip(exerciseName: String): String {
        return """
            üèãÔ∏è **Perfect Form Guide: $exerciseName**
            
            ‚úÖ **Fundamental Form Principles**:
            ‚Ä¢ Maintain proper posture and alignment throughout
            ‚Ä¢ Control the movement in both directions (up and down)
            ‚Ä¢ Engage your core to protect your lower back
            ‚Ä¢ Breathe consistently - exhale on exertion
            
            üéØ **Key Focus Areas**:
            ‚Ä¢ Start with lighter intensity to master the form
            ‚Ä¢ Keep movements smooth and controlled
            ‚Ä¢ Avoid momentum or "swinging" the exercise
            ‚Ä¢ Feel the targeted muscles working
            
            ‚ö†Ô∏è **Safety Reminders**:
            ‚Ä¢ Stop immediately if you feel sharp pain
            ‚Ä¢ Quality reps are better than quantity
            ‚Ä¢ Warm up before and stretch after
            ‚Ä¢ Listen to your body's signals
            
            üí° **Progressive Tips**:
            ‚Ä¢ Master the basic movement first
            ‚Ä¢ Gradually increase difficulty over time
            ‚Ä¢ Consider variations once you're comfortable
            ‚Ä¢ Track your progress for motivation
            
            **Remember**: Perfect form leads to better results and prevents injuries! üåü
        """.trimIndent()
    }
}
